; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=armv7a -relocation-model=pic --fdpic < %s | FileCheck %s --check-prefix=ARM
; RUN: llc -mtriple=thumbv7m -relocation-model=pic --fdpic < %s | FileCheck %s --check-prefix=THUMB
target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"

@var = dso_preemptable global i32 42, align 4
@hidden_var = hidden global i32 42, align 4
@local_const = dso_local constant i32 42, align 4
@ext_const = external constant i32, align 4
@hidden_alias = hidden alias i32, ptr @var
@const_alias = alias i32, ptr @local_const
@func_alias = alias ptr (), ptr @take_addr_func

define i32 @inc() {
; ARM-LABEL: inc:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r12, :lower16:hidden_var(sbrel)
; ARM-NEXT:    movt r12, :upper16:hidden_var(sbrel)
; ARM-NEXT:    ldr r0, [r9, r12]
; ARM-NEXT:    ldr r2, .LCPI0_0
; ARM-NEXT:    add r1, r0, #1
; ARM-NEXT:  .LPC0_0:
; ARM-NEXT:    ldr r2, [r9, r2]
; ARM-NEXT:    str r1, [r9, r12]
; ARM-NEXT:    ldr r3, [r2]
; ARM-NEXT:    add r1, r3, #1
; ARM-NEXT:    str r1, [r2]
; ARM-NEXT:    bx lr
; ARM-NEXT:    .p2align 2
; ARM-NEXT:  @ %bb.1:
; ARM-NEXT:  .LCPI0_0:
; ARM-NEXT:    .long var(GOT)
;
; THUMB-LABEL: inc:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    movw r1, :lower16:hidden_var(sbrel)
; THUMB-NEXT:    movt r1, :upper16:hidden_var(sbrel)
; THUMB-NEXT:    ldr.w r0, [r9, r1]
; THUMB-NEXT:    adds r2, r0, #1
; THUMB-NEXT:    str.w r2, [r9, r1]
; THUMB-NEXT:    ldr r1, .LCPI0_0
; THUMB-NEXT:  .LPC0_0:
; THUMB-NEXT:    add r1, r9
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    ldr r2, [r1]
; THUMB-NEXT:    adds r2, #1
; THUMB-NEXT:    str r2, [r1]
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.1:
; THUMB-NEXT:  .LCPI0_0:
; THUMB-NEXT:    .long var(GOT)
entry:
  %a = load i32, ptr @var, align 4
  %a1 = add i32 %a, 1
  store i32 %a1, ptr @var, align 4
  %b = load i32, ptr @hidden_var, align 4
  %b1 = add i32 %b, 1
  store i32 %b1, ptr @hidden_var, align 4
  ret i32 %b
}

define i32 @read_const()  {
; ARM-LABEL: read_const:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    ldr r0, .LCPI1_0
; ARM-NEXT:  .LPC1_0:
; ARM-NEXT:    ldr r0, [r9, r0]
; ARM-NEXT:    ldr r1, .LCPI1_1
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:  .LPC1_1:
; ARM-NEXT:    ldr r1, [pc, r1]
; ARM-NEXT:    add r0, r1, r0
; ARM-NEXT:    bx lr
; ARM-NEXT:    .p2align 2
; ARM-NEXT:  @ %bb.1:
; ARM-NEXT:  .LCPI1_0:
; ARM-NEXT:    .long ext_const(GOT)
; ARM-NEXT:  .LCPI1_1:
; ARM-NEXT:    .long .Llocal_const$local-(.LPC1_1+8)
;
; THUMB-LABEL: read_const:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI1_0
; THUMB-NEXT:    ldr r1, .LCPI1_1
; THUMB-NEXT:  .LPC1_0:
; THUMB-NEXT:    add r0, pc
; THUMB-NEXT:  .LPC1_1:
; THUMB-NEXT:    add r1, r9
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    add r0, r1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.1:
; THUMB-NEXT:  .LCPI1_0:
; THUMB-NEXT:    .long .Llocal_const$local-(.LPC1_0+4)
; THUMB-NEXT:  .LCPI1_1:
; THUMB-NEXT:    .long ext_const(GOT)
entry:
  %a = load i32, ptr @local_const, align 4
  %b = load i32, ptr @ext_const, align 4
  %add = add i32 %a, %b
  ret i32 %add
}

define i32 @take_addr_var()  {
; ARM-LABEL: take_addr_var:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    ldr r0, .LCPI2_0
; ARM-NEXT:    movw r1, :lower16:hidden_var(sbrel)
; ARM-NEXT:    movt r1, :upper16:hidden_var(sbrel)
; ARM-NEXT:  .LPC2_0:
; ARM-NEXT:    add r0, pc, r0
; ARM-NEXT:    add r1, r9, r1
; ARM-NEXT:    add r0, r1, r0
; ARM-NEXT:    ldr r1, .LCPI2_1
; ARM-NEXT:  .LPC2_1:
; ARM-NEXT:    ldr r1, [r9, r1]
; ARM-NEXT:    add r0, r0, r1
; ARM-NEXT:    bx lr
; ARM-NEXT:    .p2align 2
; ARM-NEXT:  @ %bb.1:
; ARM-NEXT:  .LCPI2_0:
; ARM-NEXT:    .long .Llocal_const$local-(.LPC2_0+8)
; ARM-NEXT:  .LCPI2_1:
; ARM-NEXT:    .long ext_const(GOT)
;
; THUMB-LABEL: take_addr_var:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    movw r0, :lower16:hidden_var(sbrel)
; THUMB-NEXT:    ldr r1, .LCPI2_0
; THUMB-NEXT:    movt r0, :upper16:hidden_var(sbrel)
; THUMB-NEXT:    add r0, r9
; THUMB-NEXT:  .LPC2_0:
; THUMB-NEXT:    add r1, pc
; THUMB-NEXT:    add r0, r1
; THUMB-NEXT:    ldr r1, .LCPI2_1
; THUMB-NEXT:  .LPC2_1:
; THUMB-NEXT:    add r1, r9
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    add r0, r1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.1:
; THUMB-NEXT:  .LCPI2_0:
; THUMB-NEXT:    .long .Llocal_const$local-(.LPC2_0+4)
; THUMB-NEXT:  .LCPI2_1:
; THUMB-NEXT:    .long ext_const(GOT)
entry:
  %a = ptrtoint ptr @hidden_var to i32
  %b = ptrtoint ptr @local_const to i32
  %c = ptrtoint ptr @ext_const to i32
  %add0 = add i32 %a, %b
  %add1 = add i32 %add0, %c
  ret i32 %add1
}

define i32 @take_addr_var_alias() {
; ARM-LABEL: take_addr_var_alias:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    ldr r1, .LCPI3_0
; ARM-NEXT:    movw r0, :lower16:hidden_alias(sbrel)
; ARM-NEXT:    movt r0, :upper16:hidden_alias(sbrel)
; ARM-NEXT:    add r0, r9, r0
; ARM-NEXT:  .LPC3_0:
; ARM-NEXT:    ldr r1, [r9, r1]
; ARM-NEXT:    add r0, r0, r1
; ARM-NEXT:    bx lr
; ARM-NEXT:    .p2align 2
; ARM-NEXT:  @ %bb.1:
; ARM-NEXT:  .LCPI3_0:
; ARM-NEXT:    .long const_alias(GOT)
;
; THUMB-LABEL: take_addr_var_alias:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r1, .LCPI3_0
; THUMB-NEXT:    movw r0, :lower16:hidden_alias(sbrel)
; THUMB-NEXT:    movt r0, :upper16:hidden_alias(sbrel)
; THUMB-NEXT:  .LPC3_0:
; THUMB-NEXT:    add r1, r9
; THUMB-NEXT:    add r0, r9
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    add r0, r1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.1:
; THUMB-NEXT:  .LCPI3_0:
; THUMB-NEXT:    .long const_alias(GOT)
entry:
  %a = ptrtoint ptr @hidden_alias to i32
  %b = ptrtoint ptr @const_alias to i32
  %add = add i32 %a, %b
  ret i32 %add
}

define i32 @take_addr_func()  {
; ARM-LABEL: take_addr_func:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    ldr r0, .LCPI4_0
; ARM-NEXT:  .LPC4_0:
; ARM-NEXT:    ldr r0, [r9, r0]
; ARM-NEXT:    ldr r1, .LCPI4_1
; ARM-NEXT:  .LPC4_1:
; ARM-NEXT:    ldr r1, [r9, r1]
; ARM-NEXT:    add r0, r1, r0
; ARM-NEXT:    bx lr
; ARM-NEXT:    .p2align 2
; ARM-NEXT:  @ %bb.1:
; ARM-NEXT:  .LCPI4_0:
; ARM-NEXT:    .long func_alias(GOT)
; ARM-NEXT:  .LCPI4_1:
; ARM-NEXT:    .long take_addr_func(GOTFUNCDESC)
;
; THUMB-LABEL: take_addr_func:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI4_0
; THUMB-NEXT:    ldr r1, .LCPI4_1
; THUMB-NEXT:  .LPC4_0:
; THUMB-NEXT:    add r0, r9
; THUMB-NEXT:  .LPC4_1:
; THUMB-NEXT:    add r1, r9
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    add r0, r1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.1:
; THUMB-NEXT:  .LCPI4_0:
; THUMB-NEXT:    .long func_alias(GOT)
; THUMB-NEXT:  .LCPI4_1:
; THUMB-NEXT:    .long take_addr_func(GOTFUNCDESC)
entry:
  %a = ptrtoint ptr @take_addr_func to i32
  %b = ptrtoint ptr @func_alias to i32
  %add = add i32 %a, %b
  ret i32 %add
}

define ptr @block_addr() {
; ARM-LABEL: block_addr:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:  .Ltmp0: @ Block address taken
; ARM-NEXT:  @ %bb.1: @ %lab1
; ARM-NEXT:    ldr r0, .LCPI5_0
; ARM-NEXT:  .LPC5_0:
; ARM-NEXT:    add r0, pc, r0
; ARM-NEXT:    bx lr
; ARM-NEXT:    .p2align 2
; ARM-NEXT:  @ %bb.2:
; ARM-NEXT:  .LCPI5_0:
; ARM-NEXT:    .long .Ltmp0-(.LPC5_0+8)
;
; THUMB-LABEL: block_addr:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:  .Ltmp0: @ Block address taken
; THUMB-NEXT:  @ %bb.1: @ %lab1
; THUMB-NEXT:    ldr r0, .LCPI5_0
; THUMB-NEXT:  .LPC5_0:
; THUMB-NEXT:    add r0, pc
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:  .LCPI5_0:
; THUMB-NEXT:    .long .Ltmp0-(.LPC5_0+4)
entry:
  br label %lab1

lab1:
  ret ptr blockaddress(@block_addr, %lab1)
}
